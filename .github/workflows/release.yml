name: Build and Release

on:
  push:
    branches:
      - main   # sadece main branch push'larında çalışır
  workflow_dispatch:

jobs:
  release:
    runs-on: windows-latest
    permissions:
      contents: write
      packages: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL != '' && secrets.VITE_SUPABASE_URL || vars.VITE_SUPABASE_URL }}
      SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY != '' && secrets.VITE_SUPABASE_ANON_KEY || vars.VITE_SUPABASE_ANON_KEY }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm ci

      - name: Clear electron-builder cache
        shell: pwsh
        run: Remove-Item -Recurse -Force "$env:LOCALAPPDATA\electron-builder\Cache" -ErrorAction SilentlyContinue

      - name: Bump version
        id: bump_version
        shell: pwsh
        run: |
          $oldVersion = (Get-Content package.json | ConvertFrom-Json).version
          npm version patch --no-git-tag-version
          $newVersion = (Get-Content package.json | ConvertFrom-Json).version
          # Ensure unique tag; keep bumping until remote tag doesn't exist
          while ((git ls-remote --tags origin "v$($newVersion)") -ne $null) {
            Write-Host "Tag v$($newVersion) already exists on remote. Bumping again..."
            npm version patch --no-git-tag-version
            $newVersion = (Get-Content package.json | ConvertFrom-Json).version
          }
          echo "old_version=$oldVersion" >> $env:GITHUB_OUTPUT
          echo "new_version=$newVersion" >> $env:GITHUB_OUTPUT

      - name: Validate Supabase config
        shell: pwsh
        run: |
          if (-not $env:SUPABASE_URL) { Write-Error "Missing Supabase URL. Set repository Secret 'VITE_SUPABASE_URL' or Variable 'VITE_SUPABASE_URL'."; exit 1 }
          if (-not $env:SUPABASE_ANON_KEY) { Write-Error "Missing Supabase anon key. Set repository Secret 'VITE_SUPABASE_ANON_KEY' or Variable 'VITE_SUPABASE_ANON_KEY'."; exit 1 }
          Write-Host "Supabase config present."

      - name: Build application
        run: npm run build
        env:
          VITE_SUPABASE_URL: ${{ env.SUPABASE_URL }}
          VITE_SUPABASE_ANON_KEY: ${{ env.SUPABASE_ANON_KEY }}

      - name: Create runtime .env for packaged app
        run: |
          echo "VITE_SUPABASE_URL=${{ env.SUPABASE_URL }}" > .env
          echo "VITE_SUPABASE_ANON_KEY=${{ env.SUPABASE_ANON_KEY }}" >> .env
          type .env

      - name: Build Windows exe
        run: npx electron-builder --win --publish never
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          USE_HARD_LINKS: false

      - name: List build output
        shell: pwsh
        run: |
          echo "Listing electron-dist directory:"
          if (Test-Path "electron-dist") { 
            Get-ChildItem -Path "electron-dist" -Recurse | Select-Object FullName, Length
          } else { 
            echo "electron-dist directory does not exist"
          }
          echo "Current directory contents:"
          Get-ChildItem -Path "." | Select-Object Name, Mode

      - name: Create Git Tag
        if: ${{ hashFiles('electron-dist/*.exe') != '' }}
        shell: pwsh
        run: |
          $tag = "v${{ steps.bump_version.outputs.new_version }}"
          $exists = git ls-remote --tags origin $tag
          if ($exists) {
            Write-Host "Tag $tag already exists on remote. Skipping tag creation."
          } else {
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            git tag $tag
            git push origin $tag
          }

      - name: Create GitHub Release
        if: ${{ hashFiles('electron-dist/*.exe') != '' }}
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.bump_version.outputs.new_version }}
          name: Release v${{ steps.bump_version.outputs.new_version }}
          files: |
            electron-dist/*.exe
          generate_release_notes: true
          draft: false
          prerelease: false