import React, { useState, useEffect, useRef } from 'react';
import { Settings as SettingsType, ThemeType } from '../types';
import { Bell, Download, Shield, Clock, MessageCircle, Bot, Palette, Eye, Moon, Sun, Circle } from 'lucide-react';

// Global type declaration for window.electronAPI
declare global {
  interface Window {
    electronAPI?: {
      showNotification: (title: string, body: string) => Promise<void>;
      checkForUpdates: () => Promise<any>;
      onUpdateStatus: (callback: (status: string, info?: any) => void) => void;
      removeUpdateStatusListener: () => void;
      getVersion: () => Promise<string>;
      installUpdate: () => void; // Yeniden ba≈ülatma i√ßin eklendi
      [key: string]: any;
    };
  }
}

// üé® Tema se√ßenekleri
const themeOptions: { value: ThemeType; label: string; emoji: string; description: string }[] = [
  { value: 'light', label: 'A√ßƒ±k Tema', emoji: 'üåÖ', description: 'Klasik beyaz tema' },
  { value: 'dark', label: 'Koyu Tema', emoji: 'üåô', description: 'G√∂z yormayan karanlƒ±k tema' },
  { value: 'blue', label: 'Mavi Tema', emoji: 'üîµ', description: 'Profesyonel mavi tonlarƒ±' },
  { value: 'green', label: 'Ye≈üil Tema', emoji: 'üü¢', description: 'Doƒüal ye≈üil renkleri' },
  { value: 'orange', label: 'Turuncu Tema', emoji: 'üü†', description: 'Enerjik turuncu tonlarƒ±' },
  { value: 'purple', label: 'Mor Tema', emoji: 'üü£', description: 'Kreatif mor renkleri' },
  { value: 'gray', label: 'Gri Tema', emoji: '‚ö´', description: 'Minimal gri tonlarƒ±' },
  { value: 'red', label: 'Kƒ±rmƒ±zƒ± Tema', emoji: 'üî¥', description: 'Cesur kƒ±rmƒ±zƒ± renkleri' },
  { value: 'teal', label: 'Turkuaz Tema', emoji: 'üü¶', description: 'Sakin turkuaz tonlarƒ±' },
  { value: 'pink', label: 'Pembe Tema', emoji: 'üå∏', description: 'Sevimli pembe renkleri' },
];

interface SettingsProps {
  settings: SettingsType;
  onSave: (settings: SettingsType) => void;
  onExportData: () => void;
  onImportData: (data: any) => void;
}

export default function Settings({ settings, onSave, onExportData, onImportData }: SettingsProps) {
  const [reminderDays, setReminderDays] = useState(settings.reminderDays);
  const [notificationsEnabled, setNotificationsEnabled] = useState(settings.notificationsEnabled);
  const [autoUpdateEnabled, setAutoUpdateEnabled] = useState(settings.autoUpdateEnabled);
  const [dailyNotificationEnabled, setDailyNotificationEnabled] = useState(settings.dailyNotificationEnabled || false);
  const [dailyNotificationTime, setDailyNotificationTime] = useState(settings.dailyNotificationTime || '09:00');
  
  // Telegram bot state'leri
  const [telegramBotEnabled, setTelegramBotEnabled] = useState(settings.telegramBotEnabled || false);
  const [telegramBotToken, setTelegramBotToken] = useState(settings.telegramBotToken || '');
  const [telegramChatId, setTelegramChatId] = useState(settings.telegramChatId || '');

  // G√ºncelleme durumu
  const [updateStatus, setUpdateStatus] = useState<'idle' | 'checking' | 'available' | 'downloading' | 'downloaded' | 'not-available' | 'error'>('idle');
  const [updateMessage, setUpdateMessage] = useState('');
  const [updateInfo, setUpdateInfo] = useState<any>(null);
  const [currentVersion, setCurrentVersion] = useState<string>('');
  
  // G√ºncel updateStatus deƒüerini timeout'ta kullanmak i√ßin
  const updateStatusRef = useRef(updateStatus);
  updateStatusRef.current = updateStatus;

  useEffect(() => {
    console.log('Settings useEffect ba≈ülatƒ±ldƒ±');
    console.log('window.electronAPI:', window.electronAPI);
    console.log('window.electronAPI?.onUpdateStatus:', !!window.electronAPI?.onUpdateStatus);
    
    // Mevcut s√ºr√ºm√º al
    if (window.electronAPI?.getVersion) {
      window.electronAPI.getVersion().then((version: string) => {
        console.log('Mevcut s√ºr√ºm:', version);
        setCurrentVersion(version);
      }).catch((error: any) => {
        console.error('S√ºr√ºm alƒ±namadƒ±:', error);
        setCurrentVersion('Bilinmiyor');
      });
    }
    
    if (window.electronAPI?.onUpdateStatus) {
      const handleUpdateStatus = (status: string, info?: any) => {
        console.log('Update status alƒ±ndƒ±:', status, info);
        
        switch (status) {
          case 'checking':
            setUpdateStatus('checking');
            setUpdateMessage('G√ºncellemeler kontrol ediliyor...');
            break;
          case 'update-available':
            setUpdateStatus('available');
            setUpdateInfo(info);
            setUpdateMessage(`üéâ Yeni s√ºr√ºm mevcut: v${info?.version || 'Bilinmiyor'}\n\nOtomatik indiriliyor...`);
            break;
          case 'not-available':
            setUpdateStatus('not-available');
            setUpdateMessage('‚úÖ En son s√ºr√ºm√º kullanƒ±yorsunuz!');
            break;
          case 'error':
            setUpdateStatus('error');
            setUpdateMessage(`‚ùå Hata: ${info || 'G√ºncelleme kontrol√º ba≈üarƒ±sƒ±z'}`);
            break;
          case 'download-progress':
            setUpdateStatus('downloading');
            setUpdateMessage(`‚¨áÔ∏è ƒ∞ndiriliyor... %${Math.round(info?.percent || 0)}`);
            break;
          case 'update-downloaded':
            setUpdateStatus('downloaded');
            setUpdateMessage(`‚úÖ G√ºncelleme hazƒ±r! v${updateInfo?.version || info?.version || 'Yeni S√ºr√ºm'}\n\nüîÑ Yeniden ba≈ülatmak i√ßin butona basƒ±n.`);
            break;
          default:
            console.log('Bilinmeyen update status:', status);
            setUpdateStatus('idle');
            setUpdateMessage('');
        }
      };

      console.log('Event listener kuruldu');
      window.electronAPI.onUpdateStatus(handleUpdateStatus);

      // Cleanup
      return () => {
        console.log('Event listener temizleniyor');
        if (window.electronAPI?.removeUpdateStatusListener) {
          window.electronAPI.removeUpdateStatusListener();
        }
      };
    } else {
      console.log('electronAPI.onUpdateStatus mevcut deƒüil!');
    }
  }, []);

  const handleSave = () => {
    onSave({
      reminderDays,
      notificationsEnabled,
      autoUpdateEnabled,
      dailyNotificationEnabled,
      dailyNotificationTime,
      lastNotificationCheck: settings.lastNotificationCheck || '',
      telegramBotEnabled,
      telegramBotToken,
      telegramChatId,
    });
    alert('Ayarlar kaydedildi!');
  };

  const handleCheckUpdates = async () => {
    console.log('handleCheckUpdates ba≈ülatƒ±ldƒ±');
    console.log('window.electronAPI mevcut mu:', !!window.electronAPI);
    
    if (!window.electronAPI) {
      setUpdateStatus('error');
      setUpdateMessage('G√ºncelleme sadece Electron uygulamasƒ±nda √ßalƒ±≈üƒ±r. Web tarayƒ±cƒ±sƒ±nda √ßalƒ±≈ümƒ±yor.');
      return;
    }

    setUpdateStatus('checking');
    setUpdateMessage('G√ºncellemeler kontrol ediliyor...');

    try {
      console.log('checkForUpdates √ßaƒürƒ±lƒ±yor...');
      const result = await window.electronAPI.checkForUpdates();
      console.log('checkForUpdates sonu√ß:', result);
      
      // Eƒüer event listener √ßalƒ±≈ümƒ±yorsa, manual timeout ekle
      setTimeout(() => {
        if (updateStatusRef.current === 'checking') {
          console.log('Timeout: Event listener √ßalƒ±≈ümƒ±yor, manual g√ºncelle≈ütirme yapƒ±lƒ±yor');
          setUpdateStatus('not-available');
          setUpdateMessage('G√ºncelleme kontrol√º tamamlandƒ±. Event sistem √ßalƒ±≈ümƒ±yor, manuel kontrol yapƒ±n.');
        }
      }, 10000); // 10 saniye timeout
      
    } catch (error) {
      console.error('Update check error:', error);
      setUpdateStatus('error');
      setUpdateMessage(`G√ºncelleme kontrol√º hatasƒ±: ${error.message || error}`);
    }
  };

  const testTelegramBot = async () => {
    if (!telegramBotToken) {
      alert('L√ºtfen √∂nce Bot Token girin!');
      return;
    }

    try {
      console.log('Bot test ba≈ülatƒ±ldƒ±, token:', telegramBotToken.substring(0, 10) + '...');

      // 1. Bot bilgilerini kontrol et (getMe)
      console.log('1. Bot bilgileri kontrol ediliyor...');
      const botInfoResponse = await fetch(`https://api.telegram.org/bot${telegramBotToken}/getMe`);
      
      if (!botInfoResponse.ok) {
        const errorText = await botInfoResponse.text();
        console.error('getMe API hatasƒ±:', errorText);
        alert(`‚ùå Bot token hatasƒ±!\n\nHata: ${errorText}\n\n‚úÖ √á√∂z√ºm:\n1. @BotFather'dan yeni token alƒ±n\n2. Token'ƒ± doƒüru kopyaladƒ±ƒüƒ±nƒ±zdan emin olun\n3. Token bo≈üluk/enter i√ßermesin`);
        return;
      }
      
      const botInfo = await botInfoResponse.json();
      console.log('Bot bilgileri:', botInfo);
      
      if (!botInfo.ok) {
        alert(`‚ùå Bot token ge√ßersiz!\n\nBot yanƒ±tƒ±: ${botInfo.description}\n\n‚úÖ @BotFather'dan yeni token alƒ±n.`);
        return;
      }

      alert(`‚úÖ Bot bulundu!\n\nü§ñ Bot Adƒ±: ${botInfo.result.first_name}\nüìù Username: @${botInfo.result.username}\n\nüëÜ ≈ûimdi bu bota Telegram'da mesaj atƒ±n!`);

      // 2. Webhook kontrol√º ve temizleme
      console.log('2. Webhook durumu kontrol ediliyor...');
      const webhookResponse = await fetch(`https://api.telegram.org/bot${telegramBotToken}/getWebhookInfo`);
      if (webhookResponse.ok) {
        const webhookInfo = await webhookResponse.json();
        console.log('Webhook info:', webhookInfo);
        
        if (webhookInfo.result && webhookInfo.result.url) {
          console.log('Webhook aktif, temizleniyor...');
          const deleteWebhook = await fetch(`https://api.telegram.org/bot${telegramBotToken}/deleteWebhook`);
          console.log('Webhook silme sonucu:', await deleteWebhook.json());
        }
      }

      // 3. Chat ID bulma - √ßoklu y√∂ntem
      if (!telegramChatId) {
        console.log('3. Chat ID aranƒ±yor...');
        
        // 3a. getUpdates ile ara
        const updatesResponse = await fetch(`https://api.telegram.org/bot${telegramBotToken}/getUpdates?limit=100`);
        
        if (!updatesResponse.ok) {
          const error = await updatesResponse.text();
          alert(`‚ùå getUpdates hatasƒ±:\n${error}\n\nBot'a Telegram'da mesaj attƒ±ƒüƒ±nƒ±zdan emin olun!`);
          return;
        }

        const updatesData = await updatesResponse.json();
        console.log('Updates data:', updatesData);
        
        if (updatesData.result && updatesData.result.length > 0) {
          // T√ºm mesajlarƒ± kontrol et ve chat ID'leri topla
          const chatIds = new Set();
          updatesData.result.forEach(update => {
            const chatId = update.message?.chat?.id || 
                          update.edited_message?.chat?.id || 
                          update.callback_query?.message?.chat?.id ||
                          update.channel_post?.chat?.id;
            if (chatId) {
              chatIds.add(chatId.toString());
            }
          });
          
          if (chatIds.size > 0) {
            const chatIdArray = Array.from(chatIds);
            const foundChatId = chatIdArray[chatIdArray.length - 1]; // En son bulunan
            
            setTelegramChatId(foundChatId);
            alert(`‚úÖ Chat ID bulundu: ${foundChatId}\n\n${chatIdArray.length > 1 ? `(${chatIdArray.length} farklƒ± chat bulundu, en son kullanƒ±lan se√ßildi)` : ''}\n\n≈ûimdi "Test Et" butonuna tekrar basƒ±n!`);
            return;
          }
        }
        
        // 3b. Manuel chat ID bulma rehberi
        alert(`üì≠ Hen√ºz mesaj bulunamadƒ±!\n\nüîß Manual Chat ID bulma:\n\n1Ô∏è‚É£ Telegram'da @userinfobot'a gidin\n2Ô∏è‚É£ Bot'a /start yazƒ±n\n3Ô∏è‚É£ Size Chat ID'nizi verecek\n4Ô∏è‚É£ O ID'yi buraya girin\n\nüì± Alternatif:\n1Ô∏è‚É£ @${botInfo.result.username} bot'unuza git\n2Ô∏è‚É£ /start yazƒ±n\n3Ô∏è‚É£ "Merhaba" yazƒ±n\n4Ô∏è‚É£ Bu butona tekrar basƒ±n`);
        return;
      }

      // 4. Chat ID varsa test mesajƒ± g√∂nder
      console.log('4. Test mesajƒ± g√∂nderiliyor...');
      const response = await fetch(`https://api.telegram.org/bot${telegramBotToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: telegramChatId,
          text: `‚úÖ Telegram Bot ba≈üarƒ±yla baƒülandƒ±!\n\nü§ñ Bot: @${botInfo.result.username}\nüë§ Chat ID: ${telegramChatId}\n\nüìã Komutlar:\n/bugun - Bug√ºn √∂denecekler\n/yakin - Yakla≈üan √∂demeler\n/tumu - T√ºm aktif √∂demeler\n/gecmis - Vadesi ge√ßenler\n/istatistik - Genel √∂zet\n\nüéâ Bot hazƒ±r ve √ßalƒ±≈üƒ±yor!`,
        }),
      });

      if (response.ok) {
        const result = await response.json();
        console.log('Test mesajƒ± g√∂nderildi:', result);
        alert('‚úÖ Test mesajƒ± ba≈üarƒ±yla g√∂nderildi! Telegram\'ƒ±nƒ±zƒ± kontrol edin.\n\nüéâ Bot artƒ±k aktif ve √ßalƒ±≈üƒ±yor!');
      } else {
        const error = await response.text();
        console.error('Test mesajƒ± hatasƒ±:', error);
        alert(`‚ùå Test mesajƒ± g√∂nderilemedi:\n${error}\n\nChat ID doƒüru mu: ${telegramChatId}`);
      }
      
    } catch (error) {
      console.error('Telegram bot test hatasƒ±:', error);
      alert(`‚ùå Baƒülantƒ± hatasƒ±:\n${error}\n\nüîß Kontrol edin:\n‚Ä¢ ƒ∞nternet baƒülantƒ±nƒ±z\n‚Ä¢ Bot token doƒüru mu\n‚Ä¢ Telegram eri≈üilebilir mi`);
    }
  };

  const handleFileImport = (event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onload = (e) => {
        try {
          const data = JSON.parse(e.target?.result as string);
          onImportData(data);
        } catch (error) {
          alert('Dosya okuma hatasƒ±!');
        }
      };
      reader.readAsText(file);
    }
  };

  return (
    <div className="space-y-6">
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        <h2 className="text-xl font-semibold text-gray-900 mb-4">‚öôÔ∏è Genel Ayarlar</h2>
        
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Ka√ß g√ºn √∂nceden hatƒ±rlatsƒ±n?
            </label>
            <input
              type="number"
              min="1"
              max="365"
              value={reminderDays}
              onChange={(e) => setReminderDays(Number(e.target.value))}
              className="w-32 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
            <p className="text-sm text-gray-500 mt-1">
              √ñdeme tarihinden {reminderDays} g√ºn √∂nce bildirim gelir
            </p>
          </div>

          <div className="flex items-center">
            <input
              type="checkbox"
              id="autoUpdate"
              checked={autoUpdateEnabled}
              onChange={(e) => setAutoUpdateEnabled(e.target.checked)}
              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            />
            <label htmlFor="autoUpdate" className="ml-2 text-sm text-gray-700">
              Otomatik g√ºncellemeler (√∂nerilen)
            </label>
          </div>
        </div>
      </div>

      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        <h2 className="text-xl font-semibold text-gray-900 mb-4">üîî Bildirim Ayarlarƒ±</h2>
        
        <div className="space-y-4">
          <div className="flex items-center">
            <input
              type="checkbox"
              id="notifications"
              checked={notificationsEnabled}
              onChange={(e) => setNotificationsEnabled(e.target.checked)}
              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            />
            <label htmlFor="notifications" className="ml-2 text-sm text-gray-700">
              Masa√ºst√º bildirimlerini etkinle≈ütir
            </label>
          </div>

          {notificationsEnabled && (
            <div className="ml-6 pl-4 border-l-2 border-blue-100 space-y-4">
              <div className="flex items-center">
                <input
                  type="checkbox"
                  id="dailyNotifications"
                  checked={dailyNotificationEnabled}
                  onChange={(e) => setDailyNotificationEnabled(e.target.checked)}
                  className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                />
                <label htmlFor="dailyNotifications" className="ml-2 text-sm text-gray-700">
                  G√ºnl√ºk bildirim (o g√ºn √∂deme varsa)
                </label>
              </div>

              {dailyNotificationEnabled && (
                <div className="ml-6">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    G√ºnl√ºk bildirim saati:
                  </label>
                  <input
                    type="time"
                    value={dailyNotificationTime}
                    onChange={(e) => setDailyNotificationTime(e.target.value)}
                    className="w-32 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  />
                  <p className="text-sm text-gray-500 mt-1">
                    Her g√ºn {dailyNotificationTime} saatinde kontrol edilir
                  </p>
                </div>
              )}

              <div className="bg-blue-50 p-4 rounded-lg">
                <h4 className="text-sm font-medium text-blue-900 mb-2">Bildirim Davranƒ±≈üƒ±:</h4>
                <ul className="text-sm text-blue-800 space-y-1">
                  <li>‚Ä¢ <strong>Hatƒ±rlatma</strong>: √ñdeme tarihinden {reminderDays} g√ºn √∂nce (tek seferlik)</li>
                  <li>‚Ä¢ <strong>√ñdeme G√ºn√º</strong>: √ñdeme tarihi geldiƒüinde (tek seferlik)</li>
                  {dailyNotificationEnabled && (
                    <li>‚Ä¢ <strong>G√ºnl√ºk</strong>: Her g√ºn {dailyNotificationTime}'da o g√ºn √∂deme varsa</li>
                  )}
                </ul>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Telegram Bot Ayarlarƒ± */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        <h2 className="text-xl font-semibold text-gray-900 mb-4">ü§ñ Telegram Bot</h2>
        
        <div className="space-y-4">
          <div className="flex items-center">
            <input
              type="checkbox"
              id="telegramBot"
              checked={telegramBotEnabled}
              onChange={(e) => setTelegramBotEnabled(e.target.checked)}
              className="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            />
            <label htmlFor="telegramBot" className="ml-2 text-sm text-gray-700">
              Telegram bot bildirimlerini etkinle≈ütir
            </label>
          </div>

          {telegramBotEnabled && (
            <div className="ml-6 pl-4 border-l-2 border-green-100 space-y-4">
              <div className="bg-green-50 p-4 rounded-lg">
                <h4 className="text-sm font-medium text-green-900 mb-2">üìã Bot Kurulum Adƒ±mlarƒ±:</h4>
                <ol className="text-sm text-green-800 space-y-2 list-decimal list-inside">
                  <li><strong>@BotFather'a mesaj atƒ±n</strong> ve <code>/newbot</code> yazƒ±n</li>
                  <li><strong>Bot token'ƒ±nƒ±</strong> a≈üaƒüƒ±ya yapƒ±≈ütƒ±rƒ±n</li>
                  <li><strong>"Test Et"</strong> butonuna basƒ±n ‚Üí Bot bilgileri kontrol edilir</li>
                  <li><strong>Bot'unuza mesaj atƒ±n</strong> (/start, merhaba vs.)</li>
                  <li><strong>"Test Et"</strong> butonuna tekrar basƒ±n ‚Üí Chat ID otomatik bulunur</li>
                </ol>
                
                <div className="mt-3 p-3 bg-blue-50 rounded border-l-4 border-blue-400">
                  <h5 className="text-sm font-medium text-blue-900 mb-1">üîß Chat ID Bulunamƒ±yorsa:</h5>
                  <ul className="text-xs text-blue-800 space-y-1">
                    <li>‚Ä¢ <strong>@userinfobot</strong>'a /start yazƒ±n ‚Üí Chat ID'nizi verir</li>
                    <li>‚Ä¢ <strong>@chatid_echo_bot</strong>'a mesaj atƒ±n ‚Üí Chat ID d√∂ner</li>
                    <li>‚Ä¢ Manuel olarak a≈üaƒüƒ±ya yazƒ±n ve test edin</li>
                  </ul>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Bot Token:
                </label>
                <input
                  type="text"
                  value={telegramBotToken}
                  onChange={(e) => setTelegramBotToken(e.target.value)}
                  placeholder="1234567890:ABC-DEF1234ghIkl-zyx57W2v1u123ew11"
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
                <p className="text-sm text-gray-500 mt-1">
                  @BotFather'dan alacaƒüƒ±nƒ±z token
                </p>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Chat ID:
                </label>
                <input
                  type="text"
                  value={telegramChatId}
                  onChange={(e) => setTelegramChatId(e.target.value)}
                  placeholder="123456789"
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                />
                <p className="text-sm text-gray-500 mt-1">
                  Kendi Telegram Chat ID'niz
                </p>
              </div>

              <button
                onClick={testTelegramBot}
                className="bg-green-600 text-white py-2 px-4 rounded-lg hover:bg-green-700 transition-colors"
              >
                {!telegramChatId ? 'üîç Chat ID Bul & Test Et' : 'üß™ Bot\'u Test Et'}
              </button>

              {!telegramChatId && (
                <div className="bg-yellow-50 p-3 rounded-lg border-l-4 border-yellow-400">
                  <p className="text-sm text-yellow-800">
                    ‚ö†Ô∏è <strong>Chat ID bulunamadƒ±.</strong> √ñnce bot'unuza Telegram'da mesaj atƒ±n, 
                    sonra yukarƒ±daki butona basƒ±n.
                  </p>
                </div>
              )}

              <div className="bg-blue-50 p-4 rounded-lg">
                <h4 className="text-sm font-medium text-blue-900 mb-2">ü§ñ Bot Komutlarƒ±:</h4>
                <ul className="text-sm text-blue-800 space-y-1">
                  <li>‚Ä¢ <code>/bugun</code> - Bug√ºn √∂denecek √ßek/faturalar</li>
                  <li>‚Ä¢ <code>/yakin</code> - 7 g√ºn i√ßinde √∂denecekler</li>
                  <li>‚Ä¢ <code>/tumu</code> - T√ºm aktif √∂demeler</li>
                  <li>‚Ä¢ <code>/gecmis</code> - Vadesi ge√ßen √∂demeler</li>
                  <li>‚Ä¢ <code>/istatistik</code> - Genel √∂zet</li>
                </ul>
              </div>
            </div>
          )}
        </div>
      </div>

      {/* Basitle≈ütirilmi≈ü G√ºncelleme B√∂l√ºm√º */}
      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-semibold text-gray-900">üîÑ Uygulama G√ºncelleme</h2>
          {currentVersion && (
            <div className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium">
              v{currentVersion}
            </div>
          )}
        </div>
        
        <div className="space-y-4">
          {/* Veri G√ºvenliƒüi Garantisi */}
          <div className="bg-green-50 p-3 rounded-lg border-l-4 border-green-400">
            <div className="flex items-start">
              <div className="text-green-500 mr-2 text-lg">üõ°Ô∏è</div>
              <div>
                <p className="text-sm font-medium text-green-900">Verileriniz G√ºvende</p>
                <p className="text-xs text-green-700 mt-1">
                  T√ºm √ßek ve fatura kayƒ±tlarƒ±nƒ±z g√ºncelleme sƒ±rasƒ±nda korunur. Ayarlarƒ±nƒ±z da kaybolmaz.
                </p>
              </div>
            </div>
          </div>

          {/* Debug Panel */}
          <div className="bg-gray-50 p-3 rounded-lg border">
            <details className="cursor-pointer">
              <summary className="text-sm font-medium text-gray-700 hover:text-gray-900">
                üîç Debug Bilgileri (Geli≈ütirici)
              </summary>
              <div className="mt-2 space-y-1 text-xs text-gray-600">
                <div>‚Ä¢ Electron API Mevcut: {window.electronAPI ? '‚úÖ Evet' : '‚ùå Hayƒ±r'}</div>
                <div>‚Ä¢ Update Event Handler: {window.electronAPI?.onUpdateStatus ? '‚úÖ Evet' : '‚ùå Hayƒ±r'}</div>
                <div>‚Ä¢ Mevcut S√ºr√ºm: {currentVersion || 'Y√ºkleniyor...'}</div>
                <div>‚Ä¢ G√ºncelleme Durumu: {updateStatus}</div>
                <div>‚Ä¢ Son Mesaj: {updateMessage || 'Hen√ºz mesaj yok'}</div>
              </div>
            </details>
          </div>

          {/* G√ºncelleme Durumu */}
          {updateMessage && (
            <div className={`p-3 rounded-lg text-sm ${
              updateStatus === 'checking' ? 'bg-blue-50 text-blue-800' :
              updateStatus === 'available' ? 'bg-green-50 text-green-800' :
              updateStatus === 'not-available' ? 'bg-gray-50 text-gray-800' :
              updateStatus === 'error' ? 'bg-red-50 text-red-800' :
              updateStatus === 'downloading' ? 'bg-yellow-50 text-yellow-800' :
              updateStatus === 'downloaded' ? 'bg-purple-50 text-purple-800' :
              'bg-gray-50 text-gray-800'
            }`}>
              {updateStatus === 'checking' && '‚è≥ '}
              {updateStatus === 'available' && '‚úÖ '}
              {updateStatus === 'not-available' && '‚ÑπÔ∏è '}
              {updateStatus === 'error' && '‚ùå '}
              {updateStatus === 'downloading' && '‚¨áÔ∏è '}
              {updateStatus === 'downloaded' && '‚úÖ '}
              {updateMessage}
            </div>
          )}

          {/* G√ºncelleme Butonlarƒ± */}
          <div className="space-y-2">
            {/* Ana g√ºncelleme butonu */}
            {updateStatus !== 'downloaded' && (
              <button
                onClick={handleCheckUpdates}
                disabled={updateStatus === 'checking' || updateStatus === 'downloading'}
                className={`w-full py-3 px-4 rounded-lg font-medium transition-colors ${
                  updateStatus === 'checking' || updateStatus === 'downloading'
                    ? 'bg-gray-300 text-gray-500 cursor-not-allowed'
                    : updateStatus === 'available'
                    ? 'bg-green-600 text-white hover:bg-green-700'
                    : 'bg-blue-600 text-white hover:bg-blue-700'
                }`}
              >
                {updateStatus === 'checking' && '‚è≥ Kontrol Ediliyor...'}
                {updateStatus === 'downloading' && '‚¨áÔ∏è ƒ∞ndiriliyor...'}
                {updateStatus === 'available' && '‚úÖ G√ºncelleme Mevcut!'}
                {(updateStatus === 'idle' || updateStatus === 'not-available' || updateStatus === 'error') && 'üîç G√ºncellemeleri Kontrol Et'}
              </button>
            )}

            {/* Yeniden ba≈ülatma butonu */}
            {updateStatus === 'downloaded' && (
              <div className="space-y-3">
                <div className="bg-purple-50 p-4 rounded-lg border-l-4 border-purple-400">
                  <div className="flex items-start">
                    <div className="text-purple-500 mr-2 text-lg">üéâ</div>
                    <div>
                      <p className="text-sm font-medium text-purple-900">G√ºncelleme Hazƒ±r!</p>
                      <p className="text-xs text-purple-700 mt-1">
                        Yeni s√ºr√ºm indirildi ve kuruluma hazƒ±r. G√ºncellemeyi uygulamak i√ßin uygulamayƒ± yeniden ba≈ülatƒ±n.
                      </p>
                    </div>
                  </div>
                </div>
                
                <button
                  onClick={() => {
                    if (window.electronAPI?.installUpdate) {
                      window.electronAPI.showNotification('Uygulama Yeniden Ba≈ülatƒ±lƒ±yor', 'G√ºncelleme uygulanƒ±yor ve uygulama yeniden ba≈ülatƒ±lƒ±yor...');
                      // K√º√ß√ºk bir gecikme ile yeniden ba≈ülat
                      setTimeout(() => {
                        window.electronAPI.installUpdate();
                      }, 1000);
                    } else {
                      alert('‚ùå G√ºncelleme API\'si mevcut deƒüil. Uygulamayƒ± manuel olarak yeniden ba≈ülatƒ±n.');
                    }
                  }}
                  className="w-full py-3 px-4 rounded-lg bg-purple-600 text-white hover:bg-purple-700 transition-colors font-medium"
                >
                  üîÑ ≈ûimdi Yeniden Ba≈ülat & G√ºncelle
                </button>
              </div>
            )}

            {/* Manuel GitHub kontrol√º - sadece hata durumunda g√∂ster */}
            {updateStatus === 'error' && (
              <button
                onClick={() => {
                  window.open('https://github.com/EnesYORNUK/Hatirlaticiniz/releases/latest', '_blank');
                }}
                className="w-full py-2 px-4 rounded-lg border border-gray-300 text-gray-700 hover:bg-gray-50 transition-colors text-sm"
              >
                üåê GitHub'da Manuel Kontrol Et
              </button>
            )}
          </div>

          {/* Bilgilendirme */}
          <div className="space-y-3">
            <div className="bg-gray-50 p-3 rounded-lg">
              <p className="text-sm text-gray-600">
                üí° <strong>Nasƒ±l √ßalƒ±≈üƒ±r:</strong> G√ºncelleme varsa otomatik indirilir ve kuruluma hazƒ±r hale gelir. 
                Tek tu≈üla uygulamayƒ± yeniden ba≈ülatƒ±p g√ºncellemeyi uygulayabilirsiniz.
              </p>
            </div>
            
            <div className="bg-blue-50 p-3 rounded-lg">
              <h4 className="text-sm font-medium text-blue-900 mb-2">üìã G√ºncelleme S√ºreci:</h4>
              <ol className="text-xs text-blue-800 space-y-1 list-decimal list-inside">
                <li><strong>Kontrol Et</strong> ‚Üí GitHub'dan yeni s√ºr√ºm kontrol edilir</li>
                <li><strong>ƒ∞ndir</strong> ‚Üí G√ºncelleme otomatik indirilir (%0-100)</li>
                <li><strong>Hazƒ±r</strong> ‚Üí "Yeniden Ba≈ülat" butonu g√∂r√ºn√ºr</li>
                <li><strong>G√ºncelle</strong> ‚Üí Tek tƒ±k ile uygulama g√ºncellenir</li>
              </ol>
            </div>
            
            <div className="bg-orange-50 p-3 rounded-lg">
              <h4 className="text-sm font-medium text-orange-900 mb-2">üõ°Ô∏è Veri G√ºvenliƒüi Detaylarƒ±:</h4>
              <ul className="text-xs text-orange-800 space-y-1">
                <li>‚Ä¢ <strong>√áek/Fatura Kayƒ±tlarƒ±:</strong> localStorage'da g√ºvenle saklanƒ±r</li>
                <li>‚Ä¢ <strong>Ayarlar:</strong> Bildirim ve Telegram ayarlarƒ± korunur</li>
                <li>‚Ä¢ <strong>Yedekleme:</strong> G√ºncellemeden √∂nce yedek alabilirsiniz</li>
                <li>‚Ä¢ <strong>Geri Alma:</strong> Sorun olursa eski s√ºr√ºm√º y√ºkleyebilirsiniz</li>
              </ul>
            </div>
            
            <p className="text-xs text-gray-500">
              ‚ö†Ô∏è <strong>Sorun varsa:</strong> F12 tu≈üuna basƒ±n, Console sekmesini a√ßƒ±n ve debug bilgilerini kontrol edin.
            </p>
          </div>
        </div>
      </div>

      {/* üé® Tema Ayarlarƒ± B√∂l√ºm√º */}
      <div className="theme-surface rounded-lg shadow-md p-6 theme-border border">
        <div className="flex items-center gap-3 mb-6">
          <div className="theme-primary rounded-full p-2">
            <Palette className="w-5 h-5 text-white" />
          </div>
          <div>
            <h3 className="theme-text text-lg font-semibold">üé® Tema Ayarlarƒ±</h3>
            <p className="theme-text-muted text-sm">Uygulamanƒ±n g√∂r√ºn√ºm√ºn√º ki≈üiselle≈ütirin</p>
          </div>
        </div>

        <div className="space-y-4">
          {/* Tema Se√ßici */}
          <div>
            <label className="theme-text block text-sm font-medium mb-3">
              Tema Se√ßin
            </label>
            <div className="relative">
              <select
                value={settings.theme}
                onChange={(e) => onSave({ ...settings, theme: e.target.value as ThemeType })}
                className="theme-input w-full px-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 appearance-none bg-white pr-10"
              >
                {themeOptions.map(option => (
                  <option key={option.value} value={option.value}>
                    {option.emoji} {option.label} - {option.description}
                  </option>
                ))}
              </select>
              <Eye className="absolute right-3 top-1/2 transform -translate-y-1/2 w-5 h-5 theme-text-muted pointer-events-none" />
            </div>
          </div>

          {/* Tema √ñnizleme Kartlarƒ± */}
          <div className="mt-6">
            <label className="theme-text block text-sm font-medium mb-3">
              Tema √ñnizlemesi
            </label>
            <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 gap-3">
              {themeOptions.map(option => (
                <button
                  key={option.value}
                  onClick={() => onSave({ ...settings, theme: option.value })}
                  className={`p-3 rounded-lg border-2 transition-all duration-200 text-center hover:scale-105 ${
                    settings.theme === option.value
                      ? 'theme-primary border-current shadow-lg'
                      : 'theme-surface theme-border hover:shadow-md'
                  }`}
                >
                  <div className="text-2xl mb-1">{option.emoji}</div>
                  <div className={`text-xs font-medium ${
                    settings.theme === option.value ? 'text-white' : 'theme-text'
                  }`}>
                    {option.label.replace(' Tema', '')}
                  </div>
                </button>
              ))}
            </div>
          </div>

          {/* Mevcut Tema Info */}
          <div className="theme-bg-secondary rounded-lg p-4 border theme-border">
            <div className="flex items-center gap-3">
              <div className="text-2xl">
                {themeOptions.find(t => t.value === settings.theme)?.emoji}
              </div>
              <div>
                <div className="theme-text font-medium">
                  Aktif Tema: {themeOptions.find(t => t.value === settings.theme)?.label}
                </div>
                <div className="theme-text-muted text-sm">
                  {themeOptions.find(t => t.value === settings.theme)?.description}
                </div>
              </div>
            </div>
          </div>

          {/* Tema ƒ∞pu√ßlarƒ± */}
          <div className="theme-info bg-blue-50 border border-blue-200 rounded-lg p-4">
            <div className="flex items-start gap-3">
              <Circle className="w-5 h-5 text-blue-500 mt-0.5 flex-shrink-0" />
              <div>
                <div className="text-blue-800 font-medium text-sm mb-1">üí° Tema ƒ∞pu√ßlarƒ±</div>
                <div className="text-blue-700 text-sm space-y-1">
                  <div>‚Ä¢ <strong>Koyu Tema:</strong> Gece kullanƒ±mƒ± i√ßin ideal</div>
                  <div>‚Ä¢ <strong>Mavi/Gri:</strong> Profesyonel ortamlar i√ßin</div>
                  <div>‚Ä¢ <strong>Ye≈üil/Turkuaz:</strong> G√∂z yorgunluƒüunu azaltƒ±r</div>
                  <div>‚Ä¢ <strong>Renkli Temalar:</strong> Ki≈üisel kullanƒ±m i√ßin eƒülenceli</div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        <h2 className="text-xl font-semibold text-gray-900 mb-4">üíæ Veri Yedekleme</h2>
        
        <div className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <button
              onClick={onExportData}
              className="bg-green-600 text-white py-2 px-4 rounded-lg hover:bg-green-700 transition-colors"
            >
              üì§ Verileri Dƒ±≈üa Aktar
            </button>
            
            <label className="bg-orange-600 text-white py-2 px-4 rounded-lg hover:bg-orange-700 transition-colors cursor-pointer text-center">
              üì• Verileri ƒ∞√ße Aktar
              <input
                type="file"
                accept=".json"
                onChange={handleFileImport}
                className="hidden"
              />
            </label>
          </div>
          
          <p className="text-sm text-gray-500">
            Verilerinizi d√ºzenli olarak yedeklemenizi √∂neririz.
          </p>
        </div>
      </div>

      <div className="flex justify-end">
        <button
          onClick={handleSave}
          className="bg-blue-600 text-white py-2 px-6 rounded-lg hover:bg-blue-700 transition-colors font-medium"
        >
          üíæ Ayarlarƒ± Kaydet
        </button>
      </div>
    </div>
  );
}
